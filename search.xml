<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>聊一聊自己对“新技术”的看法</title>
      <link href="/2023/03/05/%E8%81%8A%E4%B8%80%E8%81%8A%E8%87%AA%E5%B7%B1%E5%AF%B9%E2%80%9C%E6%96%B0%E6%8A%80%E6%9C%AF%E2%80%9D%E7%9A%84%E7%9C%8B%E6%B3%95/"/>
      <url>/2023/03/05/%E8%81%8A%E4%B8%80%E8%81%8A%E8%87%AA%E5%B7%B1%E5%AF%B9%E2%80%9C%E6%96%B0%E6%8A%80%E6%9C%AF%E2%80%9D%E7%9A%84%E7%9C%8B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="ChatGPT在国内火热引发的思考"><a href="#ChatGPT在国内火热引发的思考" class="headerlink" title="ChatGPT在国内火热引发的思考"></a>ChatGPT在国内火热引发的思考</h2><h3 id="互联网时代的信息闭塞"><a href="#互联网时代的信息闭塞" class="headerlink" title="互联网时代的信息闭塞"></a>互联网时代的信息闭塞</h3><p>现在处于什么时代？ - 毫无疑问是互联网时代。</p><p>互联网时代的信息传播的非常快，但是ChatGPT在国内的二次火热，确让我认识到一个很严重的问题，那就是<strong>信息闭塞</strong>。</p><p>为什么说是二次火热？是因为在22年底ChatGPT已经火爆网络（外网）的时候，国内几乎还听不到多少声音。直到年后，随着ChatGPT信息在国内传播，逐渐形成势不可挡之势，在国内又掀起了第二波热度。</p><p>作为爱好技术的一员，有新的资讯、新的产品出现后，总能第一时间想办法去、接触去了解，相信国内的小部分打工人也是这样的。但绝大部分普通人以及领导阶层的，并不关心这些，他们的终极目标仅是挣钱以及“驭人”。</p><p>也许每个人的行业不同，平时关注的信息也各有区别，但是广大的媒体机构也没有发现这样的事件并传播开来，这个是不是也是一种失职呢？ChatGPT是什么？是技术上的突破。从大了看影响整个人类社会，从小了看影响每个人的工作，从中间看，是国家科技实力与差距的体现。面对这样的事件，国内也能后知后觉，也真是可以的。</p><p>居然还有人堂而皇之的说“你们是第一波使用ChatGPT的人。。。”</p><h3 id="一次讨论让我更加担心未来"><a href="#一次讨论让我更加担心未来" class="headerlink" title="一次讨论让我更加担心未来"></a>一次讨论让我更加担心未来</h3><p>在国内第二波高潮迭起的时候，公司领导组织了大家讨论ChatGPT。</p><p>在讨论会上，大家对ChatGPT称赞不已，纷纷讨论ChatGPT能用来做什么，怎么利用ChatGPT来提高自己工作效率。当然，这点完全没有问题，也是最正常不过了，刚开始我也是奔着猎奇和看是否对工作有益的目的去的。</p><p>但是随着大家讨论问题，我慢慢感觉到了不对，大家都是称赞ChatGPT以及怎么使用它来实现商业化，完全没有关注到是什么导致了ChatGPT的出现？是什么导致了ChatGPT在国外出现？</p><p>我为什么要提到“这两个为什么”，那是因为我们企业的本质还是一个教育性质的机构，作为教育机构都没有反思一下这个问题，那其他机构难道还会为了教育出一点力吗？</p><p>被卡脖子时说要强调基础，强调教育？在有新技术时却只想着使用和商业化，这不是永远都跟着别人走吗？必然被掐吗？</p><p>我不是说一定得比别国强或者羡慕别国，但是不能别国拿出产品后，本国不做深度思考，而仅想着怎么商用。。。</p><p>同理还有一个问题是ChatGPT出来后，国内BAT大厂纷纷开始投入研究，说要开发“自己的GPT”。这种现象是什么？不就是抄袭吗？不就是follow吗？复制很容易，创新很难，他们都对不起科技公司的名头。</p><p><strong>我特别想问一个问题：今天有ChatGPT，明天有stable diffusion，今天可以“借鉴”，明天也可以“借鉴，但会不会有一天连借鉴都借鉴不了，抄袭都看不懂了，那又如何呢？</strong></p><p>公司的大领导也说要让学生站在巨人的肩膀上发展，不用花时间去学习更底层的知识。这句话是对的，但是也不对，请问巨人的肩膀是怎么来的？巨人的肩膀能支撑多少新东西？</p><p>在大家发表自己对新技术的各种想法的时候，吹各种NB想法的时候，也希望能够有和我一样担心下教育，想想“为什么”的人。</p><h2 id="ChatGPT和AIGC组合后-岗位是不是就被取代了"><a href="#ChatGPT和AIGC组合后-岗位是不是就被取代了" class="headerlink" title="ChatGPT和AIGC组合后**岗位是不是就被取代了"></a>ChatGPT和AIGC组合后**岗位是不是就被取代了</h2><h3 id="我认为的ChatGPT和AIGC"><a href="#我认为的ChatGPT和AIGC" class="headerlink" title="我认为的ChatGPT和AIGC"></a>我认为的ChatGPT和AIGC</h3><p>我认为ChatGPT和AIGC可以概括为一句话：“在无数随机可能性中找最合理的答案的工具”（个人想法而已），大家对这种新工具感到惊奇与惊讶，就是被它的随机合理性给惊艳到了。</p><p>结合ChatGPT以及AIGC能做的事来看，做的还是辅助工作，是提高效率的工具。既然是工具，那么使用工具的人还是少不了，那使用工具的人为什么就不会是你我他呢？</p><p>虽然我也很担心（因为我就是其中的一员），但是如果AI只给一个答案，人就很自然的会想这个答案到底是不是最合理的答案，人也会需要花大量的时间去验证。如果AI给出很多答案（理论上AI可以给无数个答案），同样人也需要花大量的时间去验证。所以AI存在与否，可能改变了大家的工作内容，但是要取代，可能还需要一段时间。</p><h3 id="看似降低了内容创作者的门槛"><a href="#看似降低了内容创作者的门槛" class="headerlink" title="看似降低了内容创作者的门槛"></a>看似降低了内容创作者的门槛</h3><p>首先，AIGC的出现，事实上是降低了门槛，比如写台词脚本很容易，画图会很容易，做视频很容易，一分钟出图五分钟出视频都不在是梦想。感觉我也可以转行与做内容创作者了。</p><p>但是为什么我说是“看似”呢？</p><p>对于已是内容创作者的人而言，TA可以快速生成内容，但是我认为在创作领域很快就会出现“内卷”和“回退”现象。</p><p>当所有人都开始使用AI来帮忙做内容时，内容创作者的差距会被拉平，而且会需要花更多的精力去调教AI或在AI内容基础上二次修改才能达到更好得效果，这种可能就是AI带来的内卷吧。</p><p>最最关键问题：所有的内容受众是什么？ – 受众是人呀，大量的AI参与，会直接拔高人的审美阈值，进而反推给创作者更多压力。</p><p>还有个我认为最重要的要素是”<strong>当前时代还是人与人连接的时代</strong>“。一个内容中可以没有人出现，但如果连内容都不是人输出的，你认为这样的内容有会受欢迎、会有人看吗？</p><p>按照AI输出内容的速度，用不了多久AI内容就会充斥网络，“纯手工制作”就会显得如此与众不同（当然内容质量还是需要提高）。</p><p>如果发展到后面，我转行为内容行业，我一定给自己的内容打上一个标签：<strong>无AI参与</strong>。</p><p>所以我认为AI的出现是提高了内容制作的门槛，如果输出的内容连AI都不如，不如回家卖红薯。</p><h3 id="人性"><a href="#人性" class="headerlink" title="人性"></a>人性</h3><p>我不是哲学家，还配不上谈人性的问题。</p><p>但就我自己而言如果我知道一个内容完全是AI做的，我肯定不会看，这算不算是一种“种族歧视”呢。</p><p>我相信有一天会有一个组织或社区，限制AI的内容出现，或禁止AI。</p><h2 id="留一个小话题下次吐槽：什么情况下使用区块链是合适的？"><a href="#留一个小话题下次吐槽：什么情况下使用区块链是合适的？" class="headerlink" title="留一个小话题下次吐槽：什么情况下使用区块链是合适的？"></a>留一个小话题下次吐槽：什么情况下使用区块链是合适的？</h2>]]></content>
      
      
      <categories>
          
          <category> 一点小想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> ChatGPT </tag>
            
            <tag> AIGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么没有人使用区块链和智能合约搭建彩票系统？</title>
      <link href="/2022/11/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89%E4%BA%BA%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%90%AD%E5%BB%BA%E5%BD%A9%E7%A5%A8%E7%B3%BB%E7%BB%9F%EF%BC%9F/"/>
      <url>/2022/11/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89%E4%BA%BA%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%90%AD%E5%BB%BA%E5%BD%A9%E7%A5%A8%E7%B3%BB%E7%BB%9F%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="好想彩票来暴富"><a href="#好想彩票来暴富" class="headerlink" title="好想彩票来暴富"></a>好想彩票来暴富</h2><p>我买过很多彩票，但是一次也没有中过。虽然从概率上讲没有中是最正常不过的事了，但是丝毫不影响我期望通过彩票”一夜暴富“的梦想。<br>作为程序员攻城狮我曾经写过爬虫爬取历年来的彩票结果用于权重分析，然后糅合一些随机情况来生成彩票号码，期望用“魔法打败魔法“。<br>基于自己没有中过+亲戚朋友同学等都没有中过+彩票的开奖机制，不得不引发我的思考？<em><strong>彩票是可信的吗</strong></em>？<br>彩票中有些永远也看不清楚的“黑洞”，大家感兴趣可以去找找老梁关于彩票的节目。</p><h2 id="从唯物主义-心理学来看，彩票的游戏可以一直玩下去"><a href="#从唯物主义-心理学来看，彩票的游戏可以一直玩下去" class="headerlink" title="从唯物主义+心理学来看，彩票的游戏可以一直玩下去"></a>从唯物主义+心理学来看，彩票的游戏可以一直玩下去</h2><p>虽然大家（特指小屁民）都不清楚彩票背后到底是一套什么机制，到底有没有人中大奖？只要没有完全否定的证据，那彩票就还有才在的意义。<br>没人信没关系，新闻多报告暴富的例子就是降维打击。一夜暴富的欲望以及期望下一个就是自己的愿望总能占据一部分人的理智，继续投入到彩票事业中。<br>而且就算真的没有人中，只要说一句“<em>他中了也不会让你知道</em>”，就能点燃人心中的怀疑，打破信任，然后继续前行在做梦的路上。<br>更有说法是“每天投资2块，将有机会获得超过千倍万倍的回报”。我不想说概率的问题，这个只让我想起了小时候的另外一个梦想：“如果世界上的人每个人都给我一块钱，我将变的多么富有!” – 大家都去买彩票，总有一个人会变得多么富有呀！</p><h2 id="将区块链技术用于彩票系统简直是绝美"><a href="#将区块链技术用于彩票系统简直是绝美" class="headerlink" title="将区块链技术用于彩票系统简直是绝美"></a>将区块链技术用于彩票系统简直是绝美</h2><p>作为一个理工男，总会不觉地想用技术来解决问题。<br>彩票最明显的问题是“信任”问题 – 让人相信号码真的是随机产生的并且没有其他后台操作，显示结果没有时间差。<br>用区块链和智能合约就能完美解决这些问题：</p><ol><li>采用完全开源的算法产生结果，但是算法的数据来源于互联网（因为互联网的数据是完全动态的，无法预测），所以动态数据+静态算法的结果也是动态的。</li><li>使用智能合约来定义生成结果的策略，以及“中奖”后分配奖金的策略。</li><li>每个参与者的投注金额以及投注号码都以区块链的形式保存到系统中，无法再次更改。</li><li>系统没有统一的奖池，产生结果后按照智能合约规定的“中奖”结果在全系统各个节点中更新每个账户的金额，从而达到系统一致。</li><li>当然为了鼓励提供服务者，是可以划出一定的“奖金”用来奖励服务供应方的。</li></ol><p>这个方案里面，最核心的就是技术完全开源，以一套大家都信任、透明的技术来确保公平性。<br>只有这样大家玩的才是概率，靠得才是运气。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>技术能解决很多问题，但总不会被采用，因为技术不会作假。</p>]]></content>
      
      
      <categories>
          
          <category> 一点小想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 彩票系统 </tag>
            
            <tag> 区块链 </tag>
            
            <tag> 智能合约 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freepd音乐爬虫下载Python手把手教程</title>
      <link href="/2022/06/12/freepd%E9%9F%B3%E4%B9%90%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDPython%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/"/>
      <url>/2022/06/12/freepd%E9%9F%B3%E4%B9%90%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDPython%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="freepd音乐爬虫下载Python手把手教程"><a href="#freepd音乐爬虫下载Python手把手教程" class="headerlink" title="freepd音乐爬虫下载Python手把手教程"></a>freepd音乐爬虫下载Python手把手教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://freepd.com/">freepd网站</a>，上面有很多无版权的音乐可供广大内容创作者使用，主页情况如下图：</p><p><img src="https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/lOz8VyC12SLgKCoyx8bcfK5ob4Ugl37g/freepd%E9%9F%B3%E4%B9%90%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDPython%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%201.png" alt="image.png"></p><p>网站提供一键打包下载的功能，但需要付钱购买，作为程序员穷屌丝一枚，还是尝试能不能从其他路径获取音乐，于是就想到了爬虫，可以通过爬虫将所有的音乐下载下来。</p><p>其实讲到爬虫，可能各位看官觉得爬虫是特别高大上的，比如鼎鼎大名的scrapy框架，但实际上爬虫往往可以根据自己的实际需求编写，直接使用python编写就能实现目的。所以这里介绍了使用python编写一段代码（我称之为爬虫）下载freepd音乐的代码。</p><h2 id="目标分析"><a href="#目标分析" class="headerlink" title="目标分析"></a>目标分析</h2><p>要通过爬虫代码自动化的下载我们需要的内容，首要的步骤就是了解下载内容的网站，了解被下载内容是如何组织的，在浏览器中可以按F12进入开发者模式，通过查看网络访问行为以及网络数据，找到被下载数据的规律。<br><strong>在我看来没有规律的数据也就没有使用爬虫的必要。</strong><br>下面我们一起来观察分析网页。</p><h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p>从主页能够看到freepd对音乐大致做了分类：<br><img src="https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/w0GHo22bOK8ajLrz6Ed8xLEdb3t82o3V/freepd%E9%9F%B3%E4%B9%90%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDPython%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%202.png" alt="image.png"></p><h3 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h3><p>我们选择其中一个点击进入：<br><img src="https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/hWm1WpDUMltD8DpmQpCX0EhlTJip25JE/freepd%E9%9F%B3%E4%B9%90%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDPython%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%203.png" alt="image-2.png"><br>从图中可知在该页面上有3个点需要注意：</p><ol><li>URL的变化，在不同分类页面中的url是有变化的：<a href="https://freepd.com/upbeat.php">https://freepd.com/upbeat.php</a></li><li>我们的目的是下载音乐，将鼠标移动到下载按钮后可以看到下载该音乐的下载链接：<a href="https://freepd.com/music/Advertime.mp3">https://freepd.com/music/Advertime.mp3</a></li></ol><p>再次查看其它子页面，大家应该可以发现freepd的规律。</p><h3 id="批量音乐名称的来源"><a href="#批量音乐名称的来源" class="headerlink" title="批量音乐名称的来源"></a>批量音乐名称的来源</h3><p>通过对子页面的分析可以知道，通用页面音乐的下载链接模板为：<a href="https://freepd.com/music/%7Bmusic_name%7D.mp3">https://freepd.com/music/{music_name}.mp3</a> ，page2页面对于的音乐下载链接模板为：<a href="https://freepd.com/Page2/music/%7Bmusic_name%7D.mp3%E3%80%82">https://freepd.com/Page2/music/{music_name}.mp3。</a><br>剩下的问题就是音乐的名称music_name是怎么来的，这个时候就需要F12进入开发者模式了，分析网络数据，如下：<br><img src="https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/z3dGdFOG6VCQXrNB0rdysNcpVcI7Sb3U/freepd%E9%9F%B3%E4%B9%90%E7%88%AC%E8%99%AB%E4%B8%8B%E8%BD%BDPython%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E7%A8%8B%204.png" alt="image-3.png"><br>通过浏览器的网络请求数据分析定位到了会返回所有音乐名称的请求包，然后在该请求包中搜索一个界面有显示的歌曲的名称，比如Advertime，就能够定位到该歌曲在返回内容中的格式，通过多查询几首歌曲，找到歌曲在返回值中的规律是：<code>HREF=&quot;/music/Advertime.mp3&quot;</code>（在Page2中稍有不同）</p><p>其实到这里的分析阶段已经差不多了，可以明确的是歌曲的下载链接和歌名的形式都是规律的，在这个基础上就可以开始编写代码了。</p><h2 id="代码-讲解部分"><a href="#代码-讲解部分" class="headerlink" title="代码+讲解部分"></a>代码+讲解部分</h2><h3 id="引用必要模块"><a href="#引用必要模块" class="headerlink" title="引用必要模块"></a>引用必要模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><ul><li>requests模块是进行网络访问必要的包，我们这里主要使用该包提供的get()方法，获取对应url的网络访问内容。</li><li>re是正则表达式模板，这里使用该模块的原因是通过分析freepd的网页返回内容知道，所有待下载的音乐都是和html内容混合到一起的，不是传统的json或xml标准格式的返回内容，所以需要使用re库提取结果中的音乐名称。</li><li>os库目的是音乐文件存储和判断的库。</li><li>threading库通过并发的方式提高下载的效率。</li></ul><h3 id="获取歌曲名称信息"><a href="#获取歌曲名称信息" class="headerlink" title="获取歌曲名称信息"></a>获取歌曲名称信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part = <span class="string">&quot;epic&quot;</span></span><br></pre></td></tr></table></figure><p>确定想要下载的歌曲属于哪个子页面，通过变量定义，更加方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> part:</span><br><span class="line">    url = <span class="string">&quot;https://freepd.com/Page2/&quot;</span></span><br><span class="line">    ret = requests.get(url)</span><br><span class="line">    cont = ret.content</span><br><span class="line">    re_result = re.findall(<span class="string">&quot;HREF=\&quot;music/(.*).mp3\&quot;&quot;</span>.encode(), cont, re.I)</span><br><span class="line">    baseURL = <span class="string">&quot;https://freepd.com/Page2/music/&quot;</span></span><br><span class="line">    path = <span class="string">r&quot;C:\Users\wangw\Desktop\freepd2&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    url = <span class="string">&quot;https://freepd.com/%s.php&quot;</span> % part</span><br><span class="line">    ret = requests.get(url)</span><br><span class="line">    cont = ret.content</span><br><span class="line">    re_result = re.findall(<span class="string">&quot;HREF=\&quot;/music/(.*).mp3\&quot;&quot;</span>.encode(), cont, re.I)</span><br><span class="line">    baseURL = <span class="string">&quot;https://freepd.com/music/&quot;</span></span><br><span class="line">    path = <span class="string">r&quot;C:\Users\wangw\Desktop\freepd_%s&quot;</span> % part</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    os.mkdir(path)</span><br></pre></td></tr></table></figure><p>通过定义的变量不同进而确定不同的页面url、下载链接url以及文件存储路径，并使用requests库获取url对于的内容，并使用正则表达式库从所有返回值中提取歌名。</p><p>经过这段代码后，最关键的内容是baseURL用来拼接下载链接，re_result保存的是正则表达式返回的歌曲名称内容，path是歌曲存放的路径。</p><h3 id="定义下载方法和创建线程类"><a href="#定义下载方法和创建线程类" class="headerlink" title="定义下载方法和创建线程类"></a>定义下载方法和创建线程类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DownloadThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, names</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Thread create..........&quot;</span>)</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.names = names</span><br><span class="line">        <span class="built_in">print</span>(self.names)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;************************&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        download_music(self.names)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_music</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        file_name = name.decode() + <span class="string">&quot;.mp3&quot;</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(os.path.join(path, file_name)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;File %s exists, skip&quot;</span> % file_name)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ret = requests.get(baseURL + file_name)</span><br><span class="line">            music = ret.content</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(path, file_name), <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(music)</span><br><span class="line">                file.flush()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Download %s OK!&quot;</span> % file_name)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Download %s Error!&quot;</span> % file_name)</span><br></pre></td></tr></table></figure><ol><li>定义一个下载音乐的方法，通过for循环依次下载歌曲，如果歌曲存在则直接跳过，防止重复下载，下载错误时打印异常消息。其实有下载错误的歌曲也不会影响，重新再执行一次代码即可。</li><li>创建一个线程类，用户并行下载，提高效率。</li></ol><h3 id="创建多线程，并等待下载完成"><a href="#创建多线程，并等待下载完成" class="headerlink" title="创建多线程，并等待下载完成"></a>创建多线程，并等待下载完成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">thread_num = <span class="number">5</span></span><br><span class="line">total_num = <span class="built_in">len</span>(re_result)</span><br><span class="line">batch = total_num // thread_num</span><br><span class="line">threads_pool = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(thread_num):</span><br><span class="line">    t = DownloadThread(re_result[i*batch:i *batch + batch])</span><br><span class="line">    threads_pool.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> total_num % thread_num != <span class="number">0</span>:</span><br><span class="line">    t = DownloadThread(re_result[thread_num*batch:])</span><br><span class="line">    threads_pool.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads_pool:</span><br><span class="line">    i.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    all_dead = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads_pool:</span><br><span class="line">        <span class="keyword">if</span> t.is_alive():</span><br><span class="line">            all_dead = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> all_dead:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Download END&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>Thread create..........[b&#39;Adventure&#39;, b&#39;Adventures of Flying Jack&#39;, b&#39;Ancient Rite&#39;, b&#39;Assassin&#39;, b&#39;Battle Ready&#39;, b&#39;Behind Enemy Lines&#39;, b&#39;Beyond - part 2&#39;]************************Thread create..........[b&#39;Big Eyes&#39;, b&#39;Black Knight&#39;, b&#39;Cornfield Chase&#39;, b&#39;Emotional Blockbuster 2&#39;, b&#39;Epic Blockbuster 2&#39;, b&#39;Epic Boss Battle&#39;, b&#39;Evil Incoming&#39;]************************Thread create..........[b&#39;Fanfare X&#39;, b&#39;Go On Without Me&#39;, b&#39;Gothamlicious&#39;, b&#39;Heroic Adventure&#39;, b&#39;Hit n Smash&#39;, b&#39;Honor Bound&#39;, b&#39;Kings Trailer&#39;]************************Thread create..........[b&#39;Lonely Mountain&#39;, b&#39;Mothership&#39;, b&#39;New Hero in Town&#39;, b&#39;Night Attack&#39;, b&#39;Night Vigil&#39;, b&#39;Overture&#39;, b&quot;Putin&#39;s Lullaby&quot;]************************Thread create..........[b&#39;Release the Hybrids&#39;, b&#39;Rulers of Our Lands&#39;, b&#39;Strength of the Titans&#39;, b&#39;The Enemy&#39;, b&#39;The Ice Giants&#39;, b&#39;The Range&#39;, b&#39;Think About It&#39;]************************Thread create..........[b&#39;Video Game Blockbuster&#39;]************************File Adventure.mp3 exists, skipFile Big Eyes.mp3 exists, skipFile Fanfare X.mp3 exists, skipFile Adventures of Flying Jack.mp3 exists, skipFile Release the Hybrids.mp3 exists, skipFile Video Game Blockbuster.mp3 exists, skipFile Lonely Mountain.mp3 exists, skipFile Black Knight.mp3 exists, skipFile Go On Without Me.mp3 exists, skipFile Rulers of Our Lands.mp3 exists, skipFile Ancient Rite.mp3 exists, skipFile Mothership.mp3 exists, skipFile Cornfield Chase.mp3 exists, skipFile Gothamlicious.mp3 exists, skipFile Strength of the Titans.mp3 exists, skipFile Assassin.mp3 exists, skipFile New Hero in Town.mp3 exists, skipFile Emotional Blockbuster 2.mp3 exists, skipFile Heroic Adventure.mp3 exists, skipFile The Enemy.mp3 exists, skipFile Battle Ready.mp3 exists, skipFile Night Attack.mp3 exists, skipFile Epic Blockbuster 2.mp3 exists, skipFile Hit n Smash.mp3 exists, skipFile The Ice Giants.mp3 exists, skipFile Behind Enemy Lines.mp3 exists, skipFile Night Vigil.mp3 exists, skipFile Epic Boss Battle.mp3 exists, skipFile Honor Bound.mp3 exists, skipFile The Range.mp3 exists, skipFile Beyond - part 2.mp3 exists, skipFile Overture.mp3 exists, skipFile Evil Incoming.mp3 exists, skipFile Kings Trailer.mp3 exists, skipFile Think About It.mp3 exists, skipFile Putin&#39;s Lullaby.mp3 exists, skipDownload END</code></pre><p>预先定义好线程的数量，这个数量稍微定大些会比较好，因为瓶颈主要是在服务器处（应该是对单个音乐下载有速度限制），从这个网站下载的速率来看，定50个线程也是可以的。</p><p>然后给每个线程分配对应数量的歌名，并启动下载，然后等待所有线程下载完成，Done！</p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>善用工具，实现自由交流</title>
      <link href="/2022/06/05/%E5%96%84%E7%94%A8%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%94%B1%E4%BA%A4%E6%B5%81/"/>
      <url>/2022/06/05/%E5%96%84%E7%94%A8%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%94%B1%E4%BA%A4%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="今天玩什么"><a href="#今天玩什么" class="headerlink" title="今天玩什么"></a>今天玩什么</h2><p>网络不是自由之地，但是我们还是希望去追求那一丁点的自由。<br>今天的玩具有哪些呢:</p><ul><li>Zerotier + Talkie<br><img src="https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/bVfkPmLi1dMbCTOGQO8Yr4ssjzCTtX4M/zerotioer%2Btalkie.png" alt="Zerotier + Talkie"></li><li>Zerotier + Slide2Talk<br><img src="https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/2zCPg1CJD9HC3AriIuaKrlbvxwjUW3P0/zerotier%2Bslide2talk.png" alt="Zerotier + Slide2Talk"></li></ul><h2 id="为什么要推荐这两个玩具"><a href="#为什么要推荐这两个玩具" class="headerlink" title="为什么要推荐这两个玩具"></a>为什么要推荐这两个玩具</h2><p>主要原因是现在的网络环境，对于言论的审查太厉害，虽然咱也不干什么缺德事，但也不喜欢光着屁股跑是吧。</p><p><strong>这两套玩具都能够帮我们通过手机和其他用户进行P2P沟通联系，无中间商哟。</strong></p><p>之前一直有想法自己实现这样的APP，但是一直没有开动，直到慢慢发现了这两个现成的产品，虽然麻烦了点，但也勉强能够用吧。</p><h2 id="Zerotier-Talkie-Slied2Talk分别是什么"><a href="#Zerotier-Talkie-Slied2Talk分别是什么" class="headerlink" title="Zerotier Talkie Slied2Talk分别是什么"></a>Zerotier Talkie Slied2Talk分别是什么</h2><ul><li>Zerotier是可以理解为是一款全球性的VPN平台，用户只要注册就可以搭建自己的私有网络，将多个设备加入到局域网络中。</li><li>Talkie 是一款局域网的交流APP，可以文字聊天（群聊、私聊）、IP语音、文件传输。</li><li>Slide2Talk 是一款局域网对讲APP，用户可以创建或加入组，并通过语音群聊或私聊。</li></ul><p>这里列举的三款APP使用方式都可以通过bing.com搜索到，请自行搜索。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p><strong>场景一：语音对讲</strong></p><ol><li>打开2部手机，连接zerotier，确保局域网入网成功。</li><li>打开Slide2Talk，用一个手机创建组，然后另外一个手机扫码加入组</li><li>开始聊天</li></ol><p><strong>场景二：普通聊天、文件传输、IP语音</strong></p><ol><li>打开2部手机，连接zerotier，确保局域网入网成功。</li><li>打开Talkie APP后，所有接入同一个网络的用户都会出现到列表中。</li><li>开始交流</li></ol><p>PS：这里就不截图给大家介绍了，后面给大家录视频介绍。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：无中间商，安全、自由<br>缺点：配置、使用比微信啥的麻烦，功能单一</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>大家自行琢磨吧！</p><p>谢谢您的阅读。</p><p>— 2022-08-18 补充视频 —</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px; height:400;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"https://lc-gluttony.s3.amazonaws.com/SUtx7NIl1bq9/R5pH5jXo6YBo6JuwEB5skC3GEQILD8eE/0de57dd2c3db73c184f99040b19a99c5.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> Zerotier </tag>
            
            <tag> 个人信息安全 </tag>
            
            <tag> 无监控聊天 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lucy 精彩视频剪辑</title>
      <link href="/2022/04/02/Lucy%20%E7%B2%BE%E5%BD%A9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/"/>
      <url>/2022/04/02/Lucy%20%E7%B2%BE%E5%BD%A9%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>曾经我也想这样，于是就变成了程序员！！</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px; height:400;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://r9sxnjisw.hn-bkt.clouddn.com/%E7%B2%BE%E5%BD%A9%E7%94%B5%E5%BD%B1%E7%89%87%E6%AE%B5%20lucy.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      
      
      <categories>
          
          <category> 电影剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科幻 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
